---
import { type CollectionEntry, getCollection } from "astro:content";
import { format } from "date-fns";

import type { Badge, BadgeFinished, BadgeOngoing } from "../models";

import BadgeComponent from "./BadgeComponent.astro";

const allCategories = await getCollection("category");

const allChallenges = await getCollection("challenge");

type BadgeExt<T> = T & {
  badgeName?: string;
  challengeName: string;
  id: CollectionEntry<"challenge">["id"];
  url: string;
};

const badges = allChallenges
  .flatMap<BadgeExt<Badge>>((challenge) => {
    if (Array.isArray(challenge.data.badge)) {
      if (challenge.data.visibility === "only-focus") {
        const badge = challenge.data.badge.find((badge) => badge.focus)!;

        return {
          ...badge,
          id: challenge.id,
          badgeName: badge.name,
          challengeName: challenge.data.name,
          url: badge.url?.full ?? challenge.data.url.full,
        };
      }

      return challenge.data.badge.map((badge) => ({
        ...badge,
        id: challenge.id,
        badgeName: badge.name,
        challengeName: challenge.data.name,
        url: badge.url?.full ?? challenge.data.url.full,
      }));
    } else {
      return {
        ...challenge.data.badge,
        id: challenge.id,
        challengeName: challenge.data.name,
        url: challenge.data.url.full,
      };
    }
  })
  .filter((badge) => badge.status !== "hidden");

const recentlyCompleted = badges
  .filter(
    (badge): badge is BadgeExt<BadgeFinished> => badge.status === "completed",
  )
  .sort((a, b) => b.completed.valueOf() - a.completed.valueOf())
  .slice(0, 5)
  .map((badge) => ({
    ...badge,
    category: allCategories.find((category) => category.data.challenges.some((challenge) => challenge.id === badge.id))?.data.name,
  }));

const recentlyStarted = badges
  .filter(
    (badge: BadgeExt<Badge>): badge is BadgeExt<BadgeOngoing> => badge.status === "in-progress"
      || badge.status === "on-hold"
      || badge.status === "submitted"
      || badge.status === "completed",
  )
  .sort((a, b) => b.started.valueOf() - a.started.valueOf())
  .slice(0, 5)
  .map((badge) => ({
    ...badge,
    category: allCategories.find((category) => category.data.challenges.some((challenge) => challenge.id === badge.id))?.data.name,
  }));
---

<header
  class="latte bg-gradient-to-br from-ctp-peach to-ctp-mauve text-ctp-base"
>
  <div class="container mx-auto flex min-h-screen flex-col justify-evenly py-5">
    <div>
      <h2 class="mx-auto my-3 w-max text-3xl lowercase">recently completed</h2>
      <div
        class="overflow-x-scroll whitespace-nowrap pt-4 lg:whitespace-normal"
      >
        {
          recentlyCompleted.map((badge) => (
            <div class="my-1 inline-block rounded py-1">
              <a href={badge.url} rel="noopener noreferrer" target="_blank">
                <BadgeComponent
                  badge={badge}
                  name={badge.challengeName}
                  size="large"
                />

                <div class="text-sm font-light text-ctp-surface0">
                  {badge.category}
                </div>
                <h4 class="font-bold">{badge.challengeName}</h4>
                <div class="text-xs font-extralight">
                  {badge.badgeName ?? "\u00A0"}
                </div>
                <div class="text-xs font-extralight text-ctp-surface0">
                  <span class="inline-block h-4 w-4 i-lucide-check" />
                  on
                  {" "}
                  {format(badge.completed ?? 0, "yyyy-MM-dd")}
                </div>
              </a>
            </div>
          ))
        }
      </div>
    </div>

    <div>
      <h2 class="mx-auto my-3 w-max text-3xl lowercase">recently started</h2>
      <div
        class="overflow-x-scroll whitespace-nowrap pt-4 lg:whitespace-normal"
      >
        {
          recentlyStarted.map((badge) => (
            <div class="my-1 inline-block rounded py-1">
              <a href={badge.url} rel="noopener noreferrer" target="_blank">
                <BadgeComponent
                  badge={badge}
                  name={badge.challengeName}
                  size="large"
                />

                <div class="text-sm font-light text-ctp-surface0">
                  {badge.category}
                </div>
                <h4 class="font-bold">{badge.challengeName}</h4>
                <div class="text-xs font-extralight">
                  {badge.badgeName ?? "\u00A0"}
                </div>
                <div class="text-xs font-extralight text-ctp-surface0">
                  <span class="inline-block h-4 w-4 i-lucide-play" />
                  on
                  {" "}
                  {format(badge.started, "yyyy-MM-dd")}
                </div>
              </a>
            </div>
          ))
        }
      </div>
    </div>
  </div>
</header>
