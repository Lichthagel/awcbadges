---
interface Props {
  commentId: number;
}

import { z } from "astro:content";
import marked from "../marked";

const { commentId } = Astro.props;

const response = await fetch("https://graphql.anilist.co/", {
  method: "POST",
  headers: {
    "Content-Type": "application/json",
    Accept: "application/json",
  },
  body: JSON.stringify({
    query: /* GraphQL */ `
      query ($id: Int) {
        ThreadComment(id: $id) {
          comment
          childComments
        }
      }
    `,
    variables: {
      id: commentId,
    },
  }),
});

const comment = z
  .object({
    data: z.object({
      ThreadComment: z
        .array(
          z.object({
            comment: z.string(),
            childComments: z.array(z.object({})).nullable(),
          })
        )
        .nonempty(),
    }),
  })
  .transform((data) => data.data.ThreadComment[0])
  .parse(await response.json());

const content = marked.parse(comment.comment);
---

<div set:html={content} />
