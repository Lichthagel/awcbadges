---
type Props = {
  commentId: number;
};

import { z } from "astro:content";
import marked from "../marked";

const regex =
  /(\d+)\)\s*\[([^\]]*)\]\s*__([^_\n]*)__\s*\nhttps:\/\/anilist\.co\/(anime|manga)\/(\d+)\/\nStart: (\d\d\d\d-\d\d-\d\d) Finish: (\d\d\d\d-\d\d-\d\d)/g;

const { commentId } = Astro.props;

const response = await fetch("https://graphql.anilist.co/", {
  method: "POST",
  headers: {
    "Content-Type": "application/json",
    "Accept": "application/json",
  },
  body: JSON.stringify({
    query: /* GraphQL */ `
      query ($id: Int) {
        ThreadComment(id: $id) {
          userId
          comment
          childComments
        }
      }
    `,
    variables: {
      id: commentId,
    },
  }),
});

const comment = z
  .object({
    data: z.object({
      ThreadComment: z
        .array(
          z.object({
            userId: z.number().int(),
            comment: z.string(),
            childComments: z
              .array(
                z.object({
                  userId: z.number().int(),
                  comment: z.string(),
                })
              )
              .nullable(),
          })
        )
        .nonempty(),
    }),
  })
  .transform((data) => data.data.ThreadComment[0])
  .parse(await response.json());

const userId = comment.userId;
const content = marked.parse(comment.comment);
---

<div set:html={content} />

{
  comment.childComments
    ?.filter((childComment) => childComment.userId === userId)
    .map((childComment) => (
      <div set:html={marked.parse(childComment.comment)} />
    ))
}
